'''
    File name: bomManager.py
    Author: Huzaifa Ahmad
    Date created: 10/11/2021
    Date last modified: 10/11/2021
    Python Version: 3.10.0
    ===============================
    This program can be used to generate sub boms from a master bom. Given the refdes to filter for this script will osrt
    the master bom and create a sub bom with only parts of the same refdes suffixes If a single other projects' bom is to
    be combined with a genearted subset bom that can be done by editing the secBomDir and secBomName variables
    and marking multibom true

    Before using the script the your directory should look like the following:
    *   files are required before running the script
    **  files are required only if using a secondary bom
    *** dir and all files inside are required for bom comparison functionality, must be present before running

    Parent:
    |   *bomManager.py
    |   *bomComparison.py
    |   *comparisonFormatter.py
    |
    +---*Cadence BoMs
    |   |   *v297n.txt
    |   |   *maintenance_port_card_variant0.txt
    |   |
    +---*Gen BoM
    |   +---***last wk
    |   |   ***SUB_BOM_OLD.txt
    |   |   ***SEC_BOM_OLD.txt
    |   |   **SUB_SEC_BOM_OLD.txt
    |   |
    Each row of an Cadence CSV is in the following format:
    0         1       2          3   4           5           6      7            8
    Part Name,Ref Des,Var Status,Qty,PART_NUMBER,DESCRIPTION,MFG_PN,MANUFACTURER,PRT_NUMBER
    ===============================
'''

# used to combine parsed BoM data and convert to csv
import pandas as pd
# used to read csv generated by Cadence
import csv
# automatically compare BoMs to see changes
from bomComparator import BomComparator


class BomManager:
    # static variables these files must be in the predefined directory
    masterBomDir = "Cadence BoMs\\v297n.txt"
    secBomDir = "Cadence BoMs\\maintenance_port_card_variant0.txt"
    secBomName = "MPC"

    '''Constructor for bomManager object this
    :param bomName: Namee you wan to give the BOM, type string
    :param refdesSuffix: list of refdes suffixes that you want in your subBoM, type list
    :param multiBoMFlag: BoM Combination required flag, type bool
    '''

    def __init__(self, bomName, refdesSuffix, multiBomFlag, secBomList):
        self.refdesSuffix = refdesSuffix
        self.bomName = bomName
        self.multiBomFlag = multiBomFlag
        # constructing output directory of subBoM
        self.bomDir = "Gen Bom\\" + bomName + '_BOM.csv'

        # converting masterBoM from csv to 2D list, passing directory of master bom and nLines before bom header
        self.masterBomData = self.parseBom(BomManager.masterBomDir, 7)

        # generating the sub bom based off desired ref des
        self.subBomData, self.subBomDF = self.generateSubBom()

        # checking if bom combination is required
        if multiBomFlag:
            # converting secondary BoM from txt to 2D list, passing directory of secondary bom and nLines before bom data
            for secBomName, secBomDir in secBomList:
                self.combinedBomDir = "Gen Bom\\" + bomName + "_" + secBomName + '_BOM.csv'
                self.secBomData = self.parseBom(secBomDir, 8)

            self.combinedBomData, self.combinedBomDF = self.combineSubandSecondaryBoMs()

    def parseBom(self, bomDir, nSkipLines):
        bomData = []
        with open(bomDir, 'r') as mBom:
            # skipping header lines
            for _ in range(nSkipLines):
                next(mBom)

            # only the masterBoM has 7 lines before header
            if nSkipLines == 7:
                self.BomHeader = mBom.readline()
                self.BomHeader = self.BomHeader.rstrip("\n").split(',')

            # parsing data line by line removing everything outside of data rows
            for cLine in csv.reader(mBom, quotechar='"', delimiter=','):
                if cLine[0] != 'TOTAL':
                    bomData.append(cLine)
        return bomData

    def generateSubBom(self):
        subBomData = []

        for row in self.masterBomData:
            # filter function to check each part for every refdes that has a match in the refdesSuffix list
            subBomRefdes = list(filter(lambda refdes: (any(refdes.endswith(
                subBomSuffix) for subBomSuffix in self.refdesSuffix)), row[1].split(',')))

            # if there was refrences to the part of the schematic defined in refdesSuffix list adding it to the subBomData 2D list
            if len(subBomRefdes):
                row[1] = ', '.join(subBomRefdes)
                row[3] = len(subBomRefdes)
                subBomData.append(row)

        # removing duplicate materials from BoM
        subBomData = self.removeDupes(subBomData)
        subBomDF = pd.DataFrame(subBomData, columns=self.BomHeader)

        return subBomData, subBomDF

    def removeDupes(self, bomData):
        # this nexted loop checks for duplicate values by comparing every item to every item
        # and combining the qty and ref des to 1 line nefore deleting duplait line of material
        for i in range(0, len(bomData)-1):
            currDPN = bomData[i][4]
            for j in range(i+1, len(bomData)):
                nextDPN = bomData[j][4]
                if (currDPN != None and currDPN == nextDPN):
                    bomData[i][1] += ',' + bomData[j][1]
                    bomData[i][3] = str(
                        int(bomData[i][3]) + int(bomData[j][3]))
                    for rowIndex in range(0, len(bomData[j])):
                        bomData[j][rowIndex] = None

        # removing items from a list while iterating is messy...requires the exception handling
        for row in range(0, len(bomData)):
            try:
                if bomData[row][0] == None:
                    bomData.pop(row)
            except IndexError as error:
                pass
        # returning the sub bom data after duplicates have been removed
        return bomData

    def combineSubandSecondaryBoMs(self):
        # using copies of lists since we want to append the secondary bom to the sub bom
        # but also leave an unchanged copy of the sub BoM
        subBomDataCopy = self.subBomData.copy()
        combinedBomDataCopy = self.secBomData.copy()

        #  checking for duplicates in the two boms and combining the lines
        #  at the index of the material in the sub bom
        for subBomRow in subBomDataCopy:
            for secBomRow in combinedBomDataCopy:
                if subBomRow == secBomRow:
                    subBomRow[1] += ',' + secBomRow[1]
                    subBomRow[3] = str(int(subBomRow[3]) + int(secBomRow[3]))
                    combinedBomDataCopy.remove(secBomRow)

        # appending the secondary bom to the sub bom after all data manipulation
        subBomDataCopy.extend(combinedBomDataCopy)
        combinedSubSecDF = pd.DataFrame(subBomDataCopy, columns=self.BomHeader)
        combinedSubSecData = subBomDataCopy
        return combinedSubSecData, combinedSubSecDF

    def generateCSV(self):
        # creating a csv of the bom generated
        self.subBomDF.to_csv(self.bomDir, encoding='utf-8', index=False)
        # printing confirmation msg

        # creating csv and printing combined bom if applicable
        if (self.multiBomFlag):
            self.combinedBomDF.to_csv(
                self.combinedBomDir, encoding='utf-8', index=False)
            msg = self.bomName + " BoM Produced!\n" + self.bomName + " & " + \
                BomManager.secBomName + " Combined BoM Porduced!\n" + ""
        else:
            msg = self.bomName + " BoM Produced!\n"
        print(msg)

    def compareBoMs(self):
        oldSubBoM = pd.read_csv("Gen BoM\\last wk\\" +
                                self.bomName + "_BOM_OLD.txt").values.tolist()
        newSubBoM = self.subBomData.copy()

        subBoMComparator = BomComparator(oldSubBoM, newSubBoM, self.bomName)
        subBoMComparator.formatBoMUpdates(self.subBomData)

        if (self.multiBomFlag):
            # comparing the secondary bom to lask weeks secondary bom
            oldSecBoM = pd.read_csv("Gen BoM\\last wk\\" +
                                    self.secBomName + "_BOM_OLD.txt").values.tolist()
            newSecBoM = self.secBomData.copy()

            secBoMComparator = BomComparator(
                oldSecBoM, newSecBoM, self.secBomName)
            secBoMComparator.formatBoMUpdates(newSecBoM)

            # comparing the combined sub and secondary bom
            newCombinedBoM = self.combinedBomData
            oldCombinedBoM = pd.read_csv(
                "Gen BoM\\last wk\\" + self.bomName + "_" + BomManager.secBomName + "_BOM_OLD.txt").values.tolist()
            combinedBoMName = self.bomName + "_" + BomManager.secBomName

            combinedBoMCompatator = BomComparator(
                oldCombinedBoM, newCombinedBoM, combinedBoMName)
            combinedBoMCompatator.formatBoMUpdates(self.combinedBomData)

    def updateOldBoM():
        return


if __name__ == "__main__":
    # defining master bom name and location and boms to be combined name and locations
    masterBoMDir = "Cadence BoMs\\v297n.txt"

    secBomDir = "Cadence BoMs\\maintenance_port_card_variant0.txt"
    secBomList = [("MPC", "Cadence BoMs\\maintenance_port_card_variant0.txt")]

    # defining instance name and filtering refdes
    digBomName = "DIG"
    DigitalRefDes = ['_CG', '_DC1', '_DIG0']

    dcdcBomName = "DCDC"
    DCDCRefDes = ['_DC0']

    # creating manager objects
    DIGandMPCBoMs = BomManager(digBomName, DigitalRefDes, True, secBomList)
    # if bom comparison is not needed the subset bom csvs can be generated and the compareBoMs() function can be commented out
    # DIGandMPCBoMs.generateCSV()
    DIGandMPCBoMs.compareBoMs()

    # update directory to be implemented...automatically last weeks boms with this weeks boms and delete boms in Cadence BoMs file
    # need to ask user before making directory changes
    # DIGandMPCBoMs.updateDirectory()

    # DCDCBoM = BomManager("DCDC", DCDCRefDes, False)
    # DCDCBoM.updateDirectory()
